//this is a test program that should contrain the robot to follow a line.

//THE LOOP AT THE BOTTOM RUNS THE WHOLE PROGRAM
//SET THE CONTROLLER GAINS AT THE START on the line Robot Bot(2,0.5,0.5)
//these can be changed, eg for a pure proportional, choose (2,0,0)
//(proportional, integral, derivative)

#include <Wire.h>
#include <Adafruit_MotorShield.h>
#include "utility/Adafruit_MS_PWMServoDriver.h"

Adafruit_MotorShield AFMS = Adafruit_MotorShield(); 
Adafruit_DCMotor *myMotor1 = AFMS.getMotor(1);
Adafruit_DCMotor *myMotor2 = AFMS.getMotor(2);


class Robot{
    public:


        float orientation; //The orientation NESW of the robot - 0,N 90,E 180,S 360,W  

        int frontLeftVal = 0; //sensor values
        int frontRightVal = 0;  
        int farRightVal = 0;  
        int backMiddleVal = 0;  

        float motorSpeed = 200; //EDIT THIS 
        float motorSpeedLeft;
        float motorSpeedRight;
        float speedDifference = 0;

        int frontLeft = A0;    // input pin for FRONT LEFT light sensor
        int frontRight = A1;    // input pin for light sensor
        int offAxisRight = A2;    // input pin for light sensor
        int backMiddle = A3;    // input pin for light sensor

        int FAR_RIGHT_THRESHOLD = 100;



        enum class ActionType{LINE,TURN_LEFT,TURN_RIGHT,TURN_ONE_EIGHTY,PICKUP,BLUE_PLACE,RED_PLACE};  //ALL THE STATES OF THE ROBOT, ADD MORE IF NEEDED
        ActionType Action;


        void PIDfollowLine(int PROPORTIONAL_GAIN, int INTEGRAL_GAIN, int DERIVATIVE_GAIN){
            static float lastOffset;
            static int lineOffsetSum;

            int lineOffset = frontLeftVal-frontRightVal;
            lineOffsetSum = lineOffsetSum + lineOffset;

            float Integral = INTEGRAL_GAIN * lineOffsetSum;
            float Derivative = DERIVATIVE_GAIN * (lineOffset-lastOffset);
            float Proportional = PROPORTIONAL_GAIN * (lineOffset);

            lastOffset = lineOffset;

            //THE CONTROLLER SECTION
            speedDifference = Proportional + Integral + Derivative;
            motorSpeedLeft = motorSpeed-speedDifference;
            motorSpeedRight = motorSpeed + speedDifference;
            
            myMotor1->setSpeed(motorSpeedLeft);
            myMotor1->run(FORWARD);
            myMotor2->setSpeed(motorSpeedRight);
            myMotor2->run(FORWARD);
        }

        void binaryFollowLine(int threshold, int increaseRate){

            if(frontLeftVal>100){
                speedDifference += increaseRate;
            }
            if(frontRightVal>100){
                speedDifference -= increaseRate;
            }
            else{
                speedDifference = 0;
            }


            //THE CONTROLLER SECTION
            motorSpeedLeft = motorSpeed-speedDifference;
            motorSpeedRight = motorSpeed + speedDifference;
            
            myMotor1->setSpeed(motorSpeedLeft);
            myMotor1->run(FORWARD);
            myMotor2->setSpeed(motorSpeedRight);
            myMotor2->run(FORWARD);
        }

        float checkAllSensorValues(){
            
            //Check ALL the sensor values
            frontLeftVal = analogRead(frontLeft);
            frontRightVal = analogRead(frontRight);
            farRightVal = analogRead(offAxisRight);
            backMiddleVal = analogRead(backMiddle);

            Serial.println("front left val:  " + frontLeftVal);
            Serial.println("front right val:  " + frontRightVal);
            Serial.println("far right val:   " + farRightVal);
            Serial.println("back middle Val: " + backMiddleVal);
            Serial.println("                                     ");
            Serial.println("                                     ");
        }

        void decideActionToPerform(){
            //this takes the sensor values and works out which stage of the algorithm the robot needs to be in at any particular point
        }

        void turnLeft(){
            //code here
        }

        void turnRight(){
            //code here
        }

        void turnOneEighty(){
            //code here
        }

        void runCurrentNeededAction(){
            switch (Action)
            {
            case ActionType::LINE:
                PIDfollowLine();
                break;
            case ActionType::TURN_LEFT:
                turnLeft();
                break;
            case ActionType::TURN_RIGHT:
                turnRight();
                break;
            case ActionType::PICKUP:
                turnRight();
                break;
            case ActionType::BLUE_PLACE:
                /* code */
                break;
            case ActionType::RED_PLACE:
                /* code */
                break;  
            case ActionType::TURN_ONE_EIGHTY:
                turnOneEighty();
                break;   

            default:
                break;
            }
        }
};

/*!
    @brief Initialise the pins for the arduino, and begin serial communications
*/
void setup() {

    AFMS.begin();
    Serial.begin(9600); 
}

Robot Bot;

/*!
    @brief This is the main control loop for THE ENTIRE PROJECT
*/
void loop() {

    Bot.checkAllSensorValues();
    //Bot.PIDfollowLine(2,0.5,0.5);
    Bot.binaryFollowLine(100,20);

}
